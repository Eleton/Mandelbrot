{"version":3,"sources":["Hud.js","colorTransformation.js","compute.js","App.js","serviceWorker.js","index.js"],"names":["Hud","resolution","setResolution","center","zoom","setCenter","setZoom","useState","tempResolution","setTempResolution","x","setTempX","y","setTempY","setTempZoom","useEffect","style","position","top","bottom","left","padding","boxSizing","height","backgroundColor","color","margin","fontSize","type","value","onChange","e","parseInt","target","borderRadius","border","onClick","colorTransformation","number","max","deltaS","convertMatrix","matrix","map","row","c","compute","z","n","limit","Math","abs","r","i","z1","z2","add","App","pressed","setPressed","offset","setOffset","coord","setCoord","zoomerWidth","setZoomerWidth","zoomerHeight","setZoomerHeight","width","window","innerWidth","innerHeight","mandelbrot","useRef","mat","createMatrix","ctx","current","getContext","fillStyle","fillRect","getBoundingClientRect","w","h","delta","leftBound","topBound","xVal","yVal","push","className","display","justifyContent","ref","onMouseDown","pageX","pageY","onMouseUp","dimensionalX","dimensionalY","realX","realY","newZoom","onMouseMove","newWidth","newHeight","stroke","strokeWidth","strokeDasharray","fill","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPA0JeA,EAxJH,SAAC,GAIN,IAHLC,EAGI,EAHJA,WAAYC,EAGR,EAHQA,cACZC,EAEI,EAFJA,OACAC,GACI,EAFIC,UAEJ,EADJD,MACI,KADEE,QAEsCC,mBAASN,IADjD,mBACGO,EADH,KACmBC,EADnB,OAEsBF,mBAASJ,EAAOO,GAFtC,mBAEUC,GAFV,aAGsBJ,mBAASJ,EAAOS,GAHtC,mBAGUC,GAHV,aAI4BN,mBAASH,GAJrC,mBAIaU,GAJb,WAMJC,oBAAU,WACRJ,EAASR,EAAOO,GAChBG,EAASV,EAAOS,GAChBE,EAAYV,KAqBd,OACE,yBACEY,MAAO,CACLC,SAAU,WACVC,IAAK,EACLC,OAAQ,EACRC,KAAM,EACNC,QAAS,GACTC,UAAW,aACXC,OAAQ,OACRC,gBAAiB,2BACjBC,MAAO,UAGT,yBACET,MAAO,CACLU,OAAQ,EACRC,SAAU,KAHd,cAQA,2BACEC,KAAK,SACLC,MAAOrB,EACPsB,SA3CmB,SAACC,GACxBtB,EAAkBuB,SAASD,EAAEE,OAAOJ,SA2ChCb,MAAO,CACLkB,aAAc,GACdC,OAAQ,iBACRV,MAAO,QACPD,gBAAiB,OACjBH,QAAS,KAIb,yBACEL,MAAO,CACLU,OAAQ,EACRC,SAAU,KAHd,MAMMxB,EAAOO,GAgBb,yBACEM,MAAO,CACLU,OAAQ,EACRC,SAAU,KAHd,MAMMxB,EAAOS,GAgBb,yBACEI,MAAO,CACLU,OAAQ,EACRC,SAAU,KAHd,SAMSvB,GAcT,6BACE,4BACEgC,QA1GM,WACZlC,EAAcM,IA0GRQ,MAAO,CACLW,SAAU,GACVF,MAAO,QACPD,gBAAiB,OACjBW,OAAQ,iBACRD,aAAc,GACdb,QAAS,KARb,YClIOgB,G,MANa,SAACC,EAAQC,GACnC,IACMC,EAAS,IAAID,EACnB,OAAkB,IAAXD,EAAe,QAAf,cAAgCA,GAFxB,IAAIC,GAEZ,mBAAwDD,EAAOE,EAA/D,QCuBMC,EARO,SAACC,EAAQzC,GAC7B,OAAOyC,EAAOC,IAAI,SAAAC,GAChB,OAAOA,EAAID,IAAI,SAAAE,GACb,OAbU,SAAVC,EAAWD,EAAGE,EAAGC,EAAGC,GACxB,OAAID,IAAMC,EACD,EACEC,KAAKC,IAAIJ,EAAEK,IAAM,IAAMF,KAAKC,IAAIJ,EAAEM,IAAM,GAC1CL,EAEAF,EAAQD,EAdP,SAACS,EAAIC,GACf,MAAO,CAAEH,EAAGE,EAAGF,EAAIG,EAAGH,EAAGC,EAAGC,EAAGD,EAAIE,EAAGF,GAalBG,EAVAD,EAUgBR,EAT7B,CAAEK,GADOE,EAUiBP,GATlBK,EAAEG,EAAGH,EAAIE,EAAGD,EAAIE,EAAGF,EAAGA,EAAG,EAAEC,EAAGF,EAAEG,EAAGF,IASVR,GAAIG,EAAE,EAAGC,GAVlC,IAACK,EAAIC,EAiBTT,CAAQD,EAAG,CAACO,EAAG,EAAGC,EAAG,GAAI,EAAGpD,QC8G1BwD,MA7Hf,WAAgB,IAAD,EACiBlD,oBAAS,GAD1B,mBACNmD,EADM,KACGC,EADH,OAEepD,mBAAS,CAAEG,EAAG,EAAGE,EAAG,IAFnC,mBAENgD,EAFM,KAEEC,EAFF,OAGatD,mBAAS,CAAEG,EAAG,EAAGE,EAAG,IAHjC,mBAGNkD,EAHM,KAGCC,EAHD,OAKyBxD,mBAAS,GALlC,mBAKNyD,EALM,KAKOC,EALP,OAM2B1D,mBAAS,GANpC,mBAMN2D,EANM,KAMQC,EANR,KAQPC,EAAQC,OAAOC,WAAY/C,EAAS8C,OAAOE,YARpC,EASehE,mBAAS,CAAEG,GAAI,GAAKE,EAAG,IATtC,mBASNT,EATM,KASEE,EATF,OAUWE,mBAAS,KAVpB,mBAUNH,EAVM,KAUAE,EAVA,OAWuBC,mBAAS,KAXhC,mBAWNN,EAXM,KAWMC,EAXN,KAYPsE,EAAaC,iBAAO,MAE1B1D,oBAAU,WAGR,IAFA,IAAM2D,EAAMjC,EAAckC,EAAaxE,EAAQC,EAAMgE,EAAO7C,GAAStB,GAC/D2E,EAAMJ,EAAWK,QAAQC,WAAW,MACjClE,EAAI,EAAGA,EAAIW,EAAQX,IAC1B,IAAK,IAAIF,EAAI,EAAGA,EAAI0D,EAAO1D,IACzBkE,EAAIG,UAAY1C,EAAoBqC,EAAI9D,GAAGF,GAAIT,GAC/C2E,EAAII,SAAStE,EAAGE,EAAG,EAAG,GANZ,MASC4D,EAAWK,QAAQI,wBAA3BvE,EATO,EASPA,EAAGE,EATI,EASJA,EACViD,EAAU,CAACnD,IAAGE,OACb,CAACT,EAAQC,EAAMH,IAElB,IAAM0E,EAAe,SAAC9B,EAAGzC,EAAM8E,EAAGC,GAMhC,IALA,IAAMC,EAAS,EAAEhF,EAAM+E,EACjBE,EAAYxC,EAAEnC,EAAKwE,EAAE,EAAGE,EACxBE,EAAWzC,EAAEjC,EAAIR,EAEjBsC,EAAS,GACN9B,EAAI,EAAGA,EAAIuE,EAAGvE,IAAK,CAE1B,IADA,IAAMgC,EAAM,GACHlC,EAAI,EAAGA,EAAIwE,EAAGxE,IAAK,CAC1B,IAAM6E,EAAOF,EAAY3E,EAAE0E,EACrBI,EAAOF,EAAW1E,EAAEwE,EAC1BxC,EAAI6C,KAAK,CAACrC,EAAGmC,EAAMlC,EAAGmC,IAExB9C,EAAO+C,KAAK7C,GAEd,OAAOF,GAGT,OACE,6BACE,yBACEgD,UAAU,MACV1E,MAAO,CACLC,SAAU,WACV0E,QAAS,OACTC,eAAgB,SAChBrE,OAAQ,UAGV,4BACEsE,IAAKrB,EACLJ,MAAOA,EACP7C,OAAQA,EACRP,MAAO,CAAEC,SAAU,cAErB,yBACEmD,MAAOA,EACP7C,OAAQA,EACRP,MAAO,CAAEC,SAAU,YACnB6E,YAAa,SAAA/D,GAAM,IAAD,EACCA,EAAEE,OAAOgD,wBAAlBvE,EADQ,EACRA,EAAGE,EADK,EACLA,EACX+C,GAAW,GACXI,EAAS,CAAErD,EAAGqB,EAAEgE,MAAQrF,EAAGE,EAAGmB,EAAEiE,MAAQpF,KAE1CqF,UAAW,WACT,IAAMb,EAAS,EAAEhF,EAAMmB,EACjB8D,EAAYlF,EAAOO,EAAK0D,EAAM,EAAGgB,EAEjCc,EAAepC,EAAMpD,EAAIsD,EAAY,EACrCmC,EAAerC,EAAMlD,EAAIsD,EAAa,EACtCkC,EAAQf,EAAYD,EAAMc,EAC1BG,EAAQlG,EAAOS,EAAIR,EAAOgF,EAAMe,EAEtC9F,EAAU,CAACK,EAAG0F,EAAOxF,EAAGyF,IAExB,IAAMC,EAAUpD,KAAKC,IAAIiC,EAAMlB,EAAa,GAE5C5D,EAAQgG,GAER3C,GAAW,GACXI,EAAS,CAAErD,EAAG,EAAGE,EAAG,IACpBuD,EAAgB,GAChBF,EAAe,IAGjBsC,YAAa,SAAAxE,GACX,GAAI2B,EAAS,CACX,IAAM8C,EAAWzE,EAAEgE,MAAQnC,EAAOlD,EAAIoD,EAAMpD,EACtC+F,EAAY1E,EAAEiE,MAAQpC,EAAOhD,EAAIkD,EAAMlD,EAC7CqD,EAAeuC,EAAW,EAAI,EAAIA,GAClCrC,EAAgBsC,EAAY,EAAI,EAAIA,MAIvC/C,GAAW,0BACVhD,EAAGoD,EAAMpD,EACT0D,MAAOJ,EACPpD,EAAGkD,EAAMlD,EACTW,OAAQ2C,EACRwC,OAAQhD,EAAU,QAAU,cAC5BiD,YAAY,MACZC,gBAAgB,IAChBC,KAAK,iBAGT,kBAAC,EAAD,CACE5G,WAAYA,EACZC,cAAeA,EACfC,OAAQA,EACRE,UAAWA,EACXD,KAAMA,EACNE,QAASA,OChHCwG,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f2f6eb06.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst Hud = ({\n  resolution, setResolution,\n  center, setCenter,\n  zoom, setZoom\n}) => {\n  const [tempResolution, setTempResolution] = useState(resolution);\n  const [tempX, setTempX] = useState(center.x);\n  const [tempY, setTempY] = useState(center.y);\n  const [tempZoom, setTempZoom] = useState(zoom);\n\n  useEffect(() => {\n    setTempX(center.x);\n    setTempY(center.y);\n    setTempZoom(zoom);\n  })\n\n  const changeResolution = (e) => {\n    setTempResolution(parseInt(e.target.value));\n  }\n  const changeX = (e) => {\n    const number = parseInt(e.target.value);\n    setTempX(number);\n  }\n  const changeY = (e) => {\n    setTempY((parseInt(e.target.value)));\n  }\n  const changeZoom = (e) => {\n    setTempZoom(parseInt(e.target.value));\n  }\n  const apply = () => {\n    setResolution(tempResolution);\n    // setCenter({ x: tempX, y: tempY });\n    // setZoom(tempZoom);\n  }\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        left: 0,\n        padding: 10,\n        boxSizing: \"border-box\",\n        height: \"100%\",\n        backgroundColor: \"rgba(100, 100, 100, 0.5)\",\n        color: \"white\"\n      }}\n    >\n      <div\n        style={{\n          margin: 5,\n          fontSize: 12\n        }}\n      >\n        Resolution\n      </div>\n      <input\n        type=\"number\"\n        value={tempResolution}\n        onChange={changeResolution}\n        style={{\n          borderRadius: 10,\n          border: \"2px solid #ddd\",\n          color: \"ivory\",\n          backgroundColor: \"#333\",\n          padding: 5\n        }}\n      ></input>\n\n      <div\n        style={{\n          margin: 5,\n          fontSize: 12\n        }}\n      >\n        X: {center.x}\n      </div>\n      {/* <input\n        type=\"text\"\n        value={tempX}\n        onChange={changeX}\n        style={{\n          borderRadius: 10,\n          border: \"2px solid #ddd\",\n          color: \"ivory\",\n          backgroundColor: \"#333\",\n          padding: 5\n        }}\n      ></input> */}\n\n\n      <div\n        style={{\n          margin: 5,\n          fontSize: 12\n        }}\n      >\n        Y: {center.y}\n      </div>\n      {/* <input\n        type=\"text\"\n        value={tempY}\n        onChange={changeY}\n        style={{\n          borderRadius: 10,\n          border: \"2px solid #ddd\",\n          color: \"ivory\",\n          backgroundColor: \"#333\",\n          padding: 5\n        }}\n        step=\"any\"\n      ></input> */}\n\n      <div\n        style={{\n          margin: 5,\n          fontSize: 12\n        }}\n      >\n        Zoom: {zoom}\n      </div>\n      {/* <input\n        type=\"number\"\n        value={tempZoom}\n        onChange={changeZoom}\n        style={{\n          borderRadius: 10,\n          border: \"2px solid #ddd\",\n          color: \"ivory\",\n          backgroundColor: \"#333\",\n          padding: 5\n        }}\n      ></input> */}\n      <div>\n        <button\n          onClick={apply}\n          style={{\n            fontSize: 16,\n            color: \"ivory\",\n            backgroundColor: \"#333\",\n            border: \"2px solid #ddd\",\n            borderRadius: 10,\n            padding: 10\n          }}\n        >\n          Apply\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Hud","const colorTransformation = (number, max) => {\n  const deltaH = 360/max;\n  const deltaS = 100/max;\n  return number === 0 ? \"black\" : `hsl(${number*deltaH}, 100%, ${number*deltaS}%)`;\n}\n\nexport default colorTransformation;","const add = (z1, z2) => {\n  return { r: z1.r + z2.r, i: z1.i + z2.i};\n}\n\nconst multiply = (z1, z2) => {\n  return { r: z1.r*z2.r - z1.i * z2.i, i: 2*z1.r*z2.i };\n}\n\nconst compute = (c, z, n, limit) => {\n  if (n === limit) {\n    return 0;\n  } else if (Math.abs(z.r) >= 10 || Math.abs(z.i) >= 10) {\n    return n;\n  } else {\n    return compute(c, add(multiply(z, z), c), n+1, limit);\n  }\n}\n\nconst convertMatrix = (matrix, resolution) => {\n  return matrix.map(row => {\n    return row.map(c => {\n      return compute(c, {r: 0, i: 0}, 0, resolution);\n    })\n  })\n}\n\nexport default convertMatrix;","import React, { useState, useRef, useEffect } from 'react';\nimport Hud from \"./Hud\";\nimport './App.css';\nimport colorTransformation from \"./colorTransformation.js\";\nimport convertMatrix from \"./compute.js\";\n\nfunction App() {\n  const [pressed, setPressed] = useState(false);\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\n  const [coord, setCoord] = useState({ x: 0, y: 0 });\n\n  const [zoomerWidth, setZoomerWidth] = useState(0)\n  const [zoomerHeight, setZoomerHeight] = useState(0)\n\n  const width = window.innerWidth, height = window.innerHeight;\n  const [center, setCenter] = useState({ x: -0.5, y: 0 });\n  const [zoom, setZoom] = useState(1.5)\n  const [resolution, setResolution] = useState(100);\n  const mandelbrot = useRef(null);\n\n  useEffect(() => {\n    const mat = convertMatrix(createMatrix(center, zoom, width, height), resolution);\n    const ctx = mandelbrot.current.getContext(\"2d\");\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        ctx.fillStyle = colorTransformation(mat[y][x], resolution);\n        ctx.fillRect(x, y, 1, 1);\n      }\n    }\n    const {x, y} = mandelbrot.current.getBoundingClientRect();\n    setOffset({x, y});\n  }, [center, zoom, resolution]);\n\n  const createMatrix = (c, zoom, w, h) => {\n    const delta = (2*zoom)/h;\n    const leftBound = c.x - (w/2)*delta;\n    const topBound = c.y - zoom;\n\n    const matrix = [];\n    for (let y = 0; y < h; y++) {\n      const row = [];\n      for (let x = 0; x < w; x++) {\n        const xVal = leftBound + x*delta;\n        const yVal = topBound + y*delta;\n        row.push({r: xVal, i: yVal});\n      }\n      matrix.push(row);\n    }\n    return matrix;\n  }\n  \n  return (\n    <div>\n      <div\n        className=\"App\"\n        style={{\n          position: \"relative\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          height: \"100vh\"\n        }}\n      >\n        <canvas\n          ref={mandelbrot}\n          width={width}\n          height={height}\n          style={{ position: \"absolute\" }}\n        ></canvas>\n        <svg\n          width={width}\n          height={height}\n          style={{ position: \"absolute\" }}\n          onMouseDown={e => {\n            const { x, y } = e.target.getBoundingClientRect();\n            setPressed(true);\n            setCoord({ x: e.pageX - x, y: e.pageY - y})\n          }}\n          onMouseUp={() => {\n            const delta = (2*zoom)/height;\n            const leftBound = center.x - (width/2)*delta;\n\n            const dimensionalX = coord.x + zoomerWidth/2;\n            const dimensionalY = coord.y + zoomerHeight/2;\n            const realX = leftBound + delta*dimensionalX;\n            const realY = center.y - zoom + delta*dimensionalY;\n\n            setCenter({x: realX, y: realY});\n\n            const newZoom = Math.abs(delta*zoomerHeight/2);\n\n            setZoom(newZoom);\n\n            setPressed(false);\n            setCoord({ x: 0, y: 0 });\n            setZoomerHeight(0)\n            setZoomerWidth(0)\n\n          }}\n          onMouseMove={e => {\n            if (pressed) {\n              const newWidth = e.pageX - offset.x - coord.x;\n              const newHeight = e.pageY - offset.y - coord.y;\n              setZoomerWidth(newWidth < 0 ? 0 : newWidth)\n              setZoomerHeight(newHeight < 0 ? 0 : newHeight)\n            }\n          }}\n        >\n          {pressed && <rect\n            x={coord.x}\n            width={zoomerWidth}\n            y={coord.y}\n            height={zoomerHeight}\n            stroke={pressed ? \"white\" : \"transparent\"}\n            strokeWidth=\"2px\"\n            strokeDasharray=\"4\"\n            fill=\"transparent\"\n          />}\n        </svg>\n        <Hud\n          resolution={resolution}\n          setResolution={setResolution}\n          center={center}\n          setCenter={setCenter}\n          zoom={zoom}\n          setZoom={setZoom}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}